<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:json-logger="http://www.mulesoft.org/schema/mule/json-logger" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/json-logger http://www.mulesoft.org/schema/mule/json-logger/current/mule-json-logger.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd">
	<sub-flow name="insert-customer-data" doc:id="c504826a-d784-4969-ac80-429b4a6cb2bd" >
		<logger level="INFO" doc:name="console-customer-email" doc:id="b9ca9cb8-c601-4638-a528-d8ddf351ecd8" message="#[payload.email]"/>
		<db:select doc:name="Check-new-customer-email-already-exist-or-not" doc:id="d96ab87b-945c-49a3-8cbd-04a54a66194f" config-ref="Database_Config" target="checkCustomerEmail">
			<db:sql ><![CDATA[select * from customers WHERE email = :email]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
	email : payload.email
}]]]></db:input-parameters>
		</db:select>
		<choice doc:name="Choice" doc:id="c9e1c7cb-a573-48a2-bdaa-7a30b94135eb" >
			<when expression="#[sizeOf(vars.checkCustomerEmail)&gt;0]">
				<logger level="INFO" doc:name="expression-block" doc:id="c9b9b806-24a7-4521-9101-bf3d2825c1f2" message="email-allready-exist"/>
				<ee:transform doc:name="customer-email-allready-exist" doc:id="c226c8a3-3a19-425f-87cc-f03d20e38f60" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
var existEmail = payload.email
---
{
	'message' : "Customer already exist with this " ++ existEmail as String ++ " email."
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<otherwise >
				<logger level="INFO" doc:name="default-block" doc:id="81e7ef12-9c95-462d-8881-2b25941969f3" message="insert-customer-data"/>
				<db:insert doc:name="Insert-customer-data" doc:id="844abcb2-a0d9-4f74-aa1c-251c3353d97e" config-ref="Database_Config" autoGenerateKeys="true" target="insertCustomerData">
					<db:sql ><![CDATA[insert into customers(first_name,last_name,email,phone,date_of_birth,gender,employee_type,annual_income,active,created_at) 
VALUES(:first_name,:last_name,:email,:phone,:date_of_birth,:gender,:employee_type,:annual_income,:active,:created_at)]]></db:sql>
					<db:parameter-types >
						<db:parameter-type key="active" type="OTHER" />
					</db:parameter-types>
					<db:input-parameters ><![CDATA[#[{
	first_name: payload.first_name,
	last_name: payload.last_name,
	email: payload.email,
	phone: payload.phone,
	date_of_birth: payload.date_of_birth as Date {format: "yyyy-MM-dd"},
	gender: payload.gender,
	employee_type: payload.employee_type,
	annual_income: payload.annual_income,
	active: payload.active,
	created_at: now() as Date {format: "yyyy-MM-dd"}
}]]]></db:input-parameters>
				</db:insert>
				<ee:transform doc:name="success-message" doc:id="d1009413-5651-4102-904d-1a3c9082121c" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"Success"    : true,
	'success': 'Customer has been created successfully.'
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="update-customer-data" doc:id="a8b9f351-73f2-4d61-a22f-fd3675f73a30" >
		<validation:is-not-null doc:name="customer-id-should-not-null" doc:id="e1b9ac41-31a4-4080-a204-07324ae279c7" config-ref="Validation_Config" value="#[attributes.uriParams.'customerId']"/>
		<set-variable value="#[attributes.uriParams.'customerId']" doc:name="Set customer-id" doc:id="779abaa9-aa4d-4d8c-ad9d-1be05e28eebf" variableName="customerId"/>
		<db:query-single doc:name="get-customer-data-by-id" doc:id="5927e93e-5bd2-4a1a-be8b-7e16eac1dc7e" config-ref="Database_Config" target="customerDataById">
			<db:sql ><![CDATA[select * from customers where id =:customerId]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
	customerId : vars.customerId
}]]]></db:input-parameters>
		</db:query-single>
		<ee:transform doc:name="Transform-payload" doc:id="e62afb56-8b18-4f4b-8577-a620d1e46e01" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	'first_name' : payload.first_name default vars.customerDataById.first_name,
	'last_name' : payload.last_name default vars.customerDataById.last_name,
	'email' : payload.email default vars.customerDataById.email,
	'phone' : payload.phone default vars.customerDataById.phone,
	'date_of_birth' : payload.date_of_birth default vars.customerDataById.date_of_birth,
	'gender' : payload.gender default vars.customerDataById.gender,
	'employee_type' : payload.employee_type default vars.customerDataById.employee_type,
	'annual_income' : payload.annual_income default vars.customerDataById.annual_income,
	'active' : payload.active default vars.customerDataById.active
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<choice doc:name="Choice" doc:id="ad273f2d-e0b0-4ee4-85a7-37e526433905" >
			<when expression="#[sizeOf(vars.customerDataById)&gt;0]">
				<logger level="INFO" doc:name="customer-update-block" doc:id="33392354-eea1-4b93-afad-338c703199e5" message="update customer block"/>
				<db:update doc:name="update-customer-data" doc:id="0a260590-3dcb-42e6-abca-aeed6f05cacb" config-ref="Database_Config">
					<db:sql ><![CDATA[update customers set first_name =: first_name,last_name = :last_name,email = :email, phone = :phone,date_of_birth = :date_of_birth,gender = :gender,employee_type = :employee_type,annual_income = :annual_income,active = :active
where id = :customer_id]]></db:sql>
					<db:parameter-types >
						<db:parameter-type key="active" type="OTHER" />
					</db:parameter-types>
					<db:input-parameters ><![CDATA[#[{
	customer_id: vars.customerId,
	first_name: payload.first_name,
	last_name: payload.last_name,
	email: payload.email,
	phone: payload.phone,
	date_of_birth: payload.date_of_birth as Date {format: "yyyy-MM-dd"},
	gender: payload.gender,
	employee_type: payload.employee_type,
	annual_income: payload.annual_income,
	active: payload.active,
	updated_at: now() as Date {format: "yyyy-MM-dd"}
	
}]]]></db:input-parameters>
				</db:update>
				<ee:transform doc:name="success-message" doc:id="ec7e2e09-00cb-4e09-8800-cc7a97687eb1" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"Success"    : true,
	'message': 'Customer updated successfully'
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<otherwise >
				<ee:transform doc:name="customer-does-not-exist" doc:id="18fa633e-f7a3-48cc-98d0-fe92f0ba5584" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	'message' : 'Customer does not exist'
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="get-all-customer-data" doc:id="37eadf34-fa69-4e1a-b731-6b10be3c5a43" >
		<logger level="INFO" doc:name="get-all-customer-data-flow" doc:id="a838f06e-a513-4049-bb0e-8e8d94b14829" message="get-all-customer-data-flow"/>
		<db:select doc:name="select-all-customer-data" doc:id="70e1e21b-d0f7-4242-af4f-30591a0673d0" config-ref="Database_Config" target="allCustomersData">
			<db:sql ><![CDATA[SELECT customers.*, gender.name as genderValue
FROM customers
LEFT JOIN gender ON customers.gender = gender.id
ORDER BY customers.first_name LIMIT :limit;]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
	limit: message.attributes.uriParams.'limit'
}]]]></db:input-parameters>
		</db:select>
		<choice doc:name="Choice" doc:id="4779efb9-f194-44ef-83dd-e156433ad936" >
			<when expression="#[sizeOf(vars.allCustomersData)&gt;0]">
				<logger level="INFO" doc:name="expression-block" doc:id="73f4dd3f-cdc2-41c0-9b19-6e6e48693031" message="expression-block"/>
				<ee:transform doc:name="show-all-customers" doc:id="2fdd52ab-3ac0-42d5-8607-278693ba0a45" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
vars.allCustomersData]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<otherwise >
				<ee:transform doc:name="no-customer-found" doc:id="ae0a25f5-0b87-4d47-ad2a-f69b567171c2" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	'message': 'No record found'
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="get-customer-by-id" doc:id="7fde2619-8d09-4065-ada2-aa89294cdfc8" >
		<logger level="INFO" doc:name="get-customer-by-id-flow" doc:id="f6ee7b75-0896-445f-84d5-62dad0216879" message="get-customer-by-id-flow"/>
		<db:select doc:name="select-customer-by-id" doc:id="b88a2bd9-5598-4c96-9ef4-d76eb34cc3f5" config-ref="Database_Config" target="getCustomerById">
			<db:sql ><![CDATA[select * from customers where id =:customerId]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
	customerId : message.attributes.uriParams.'customerId'
}]]]></db:input-parameters>
		</db:select>
		<choice doc:name="Choice" doc:id="da7b81e6-ec30-40c7-bc1e-42b3d718f474" >
			<when expression="#[sizeOf(vars.getCustomerById)&gt;0]">
				<logger level="INFO" doc:name="expression-block" doc:id="013fcd64-ddfb-456c-9cc5-0d0557568977" message="expression-block"/>
				<ee:transform doc:name="show-customer-data" doc:id="00c5c44c-c5ba-435b-b9ef-8860699c2614" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
vars.getCustomerById]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<otherwise >
				<ee:transform doc:name="no-customer-found" doc:id="da695540-6b81-4482-adf3-9342b6708760" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	'message': 'No record found.'
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="sapi-add-customer-document" doc:id="5a2d2b2d-0529-4ece-9dc1-fcd4547a0aa7" >
		<logger level="INFO" doc:name="console-customer-document-payload" doc:id="7a5f4640-1cdf-4071-8ceb-3ad3c20439c6" message="#[payload]"/>
		<validation:is-number doc:name="customer id should be number" doc:id="8f151b89-ae79-47a4-a04c-cb9081a89ae1" config-ref="Validation_Config" value="#[payload.customer_id]" numberType="INTEGER" message="Customer ID should be number"/>
		<validation:is-not-null doc:name="customer id should not null" doc:id="8f1c3baa-0981-4c2e-b861-d5494c33422d" config-ref="Validation_Config" value="#[payload.customer_id]" message="Customer ID should not null"/>
		<set-variable value="#[payload.customer_id]" doc:name="Set customer-id-in-variable" doc:id="3332dbbe-3130-47aa-970f-81cb6b66b3ae" variableName="customerId"/>
		<db:select doc:name="check-customer-exist-in-primay-table-or-not" doc:id="184dc76d-e215-4f25-ba6d-a0b573ea4aa7" config-ref="Database_Config" target="checkCustomerExist">
			<db:sql ><![CDATA[select * from customers where id = :customerId]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
	customerId : vars.customerId
}]]]></db:input-parameters>
		</db:select>
		<choice doc:name="Choice" doc:id="659609da-26c0-41b9-83c5-8c91280c2569" >
			<when expression="#[sizeOf(vars.checkCustomerExist)&gt;0]">
				<logger level="INFO" doc:name="customer-exist-in-primay-table" doc:id="bc7de0bf-5f03-4dcb-a02e-92c477c75584" message="customer-exist-in-primay-table"/>
				<db:insert doc:name="add-customer-document-data" doc:id="51f259a0-b97d-4b9f-9d9c-7f301498455a" config-ref="Database_Config">
					<db:sql ><![CDATA[insert into customers_documents(customer_id,doc_type,image_url,doc_status) 
values(:customer_id,:doc_type,:image_url,:doc_status)
]]></db:sql>
					<db:parameter-types >
						<db:parameter-type key="doc_type" type="OTHER" />
						<db:parameter-type key="doc_status" type="OTHER" />
					</db:parameter-types>
					<db:input-parameters ><![CDATA[#[{
	customer_id: payload.customer_id,
	doc_type: payload."type",
	image_url: payload.image_url,
	doc_status: payload.status
}]]]></db:input-parameters>
				</db:insert>
				<ee:transform doc:name="success-message" doc:id="5318d4e2-79aa-4a64-8fc1-54f72d7aea63" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"Success"    : true,
	"message" : "The Customer Document has been successfully added."
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<otherwise >
				<logger level="INFO" doc:name="customer-does-not-exist-in-primary-table" doc:id="e1b34d3b-d538-45a5-a2d9-9dacaa19c4ac" message="customer-does-not-exist-in-primary-table"/>
				<ee:transform doc:name="message" doc:id="a1a71574-fe64-439e-878f-4706e710b9eb" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	'message' : 'Customer does not exist'
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="sapi-customer-doc-by-id" doc:id="d68cc106-24cf-4758-ae86-72f0e0de0652" >
		<logger level="INFO" doc:name="get-customer-document-by-id-flow" doc:id="4cab76e4-e72b-4d11-8cd3-3ff05fc1bd64" message="get-customer-document-by-id-flow"/>
		<validation:is-not-null doc:name="customer-id-should-not-null" doc:id="b92bad50-b5aa-4f95-b8f2-f32d9a50746e" config-ref="Validation_Config" value="#[attributes.uriParams.'customerID']" message="Customer ID should not null"/>
		<db:select doc:name="get-customer-document-data-by-id" doc:id="e59385bb-9968-4a88-82f9-904cd009f56d" config-ref="Database_Config" target="custDocById">
			<db:sql ><![CDATA[select * from customers_documents where customer_id = :customerId]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
	customerId: attributes.uriParams.'customerID'
}]]]></db:input-parameters>
		</db:select>
		<choice doc:name="Choice" doc:id="041799aa-5a91-4048-937a-1466347c503a" >
			<when expression="#[sizeOf(vars.custDocById)&gt;0]">
				<logger level="INFO" doc:name="expression-block" doc:id="72c702d1-8d9f-4503-98c5-af0fb644ae1e" message="expression-block"/>
				<ee:transform doc:name="show-customer-document-data" doc:id="46393b6b-0e6c-4e12-9431-903b923ed6eb" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
vars.custDocById]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<otherwise >
				<logger level="INFO" doc:name="default-block" doc:id="abecfd02-4919-483d-8160-49cbd24e22db" message="default-block"/>
				<ee:transform doc:name="no-customer-document-exist" doc:id="2f9ced70-1022-4978-9283-dfdcdaf60122" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	'message': 'No record found.'
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="add-customer-wallet" doc:id="74c8ba36-9dd3-4067-901e-59424096f414" >
		<logger level="INFO" doc:name="check wallet payload" doc:id="838b3c82-d244-4955-83c8-168fb6610542" message="wallet payload : #[payload]" />
		<set-variable value="#[message.attributes.queryParams.wallet_type as String]" doc:name="transaction-type" doc:id="db6658bc-9f51-4e49-8d5c-11f5b70d8f85" variableName="transactionType"/>
		<validation:is-not-null doc:name="customer-id-should-not-null" doc:id="e93e56f8-8f2a-4006-a236-4897f5b27369" config-ref="Validation_Config" value="#[payload.customer_id]" message="Customer Id should not null"/>
		<validation:is-number numberType="INTEGER" doc:name="customer-id-should-be-number" doc:id="ed26a1a2-aa36-4e74-b659-e12e57ddf20f" config-ref="Validation_Config" value="#[payload.customer_id]" message="Customer Id should be number"/>
		<ee:transform doc:name="Original-payload" doc:id="779a6bba-8500-4bae-8966-6387c99f948b" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="walletData" ><![CDATA[%dw 2.0
output application/json
---
payload


	]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<db:select doc:name="check-customer-exist-or-not" doc:id="261102b7-d110-439d-b5d9-700c3580a770" config-ref="Database_Config" target="checkCustomerExist">
			<db:sql ><![CDATA[select * from customers where id = :customerId]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
	customerId: vars.walletData.customer_id
}]]]></db:input-parameters>
		</db:select>
		<choice doc:name="Choice" doc:id="724f12e4-cded-4d33-b38e-ae2029f801f4" >
			<when expression="#[sizeOf(vars.checkCustomerExist)&gt;0]" >
				<logger level="INFO" doc:name="customer-exist" doc:id="9555393a-94a6-4b1d-a20c-9a7665b98f4b" message="customer is active"/>
				<db:select doc:name="check-customer-wallet-amount" doc:id="3ebd8b6e-34e0-460d-bfd1-ffa11afce4dc" config-ref="Database_Config" target="checkCustomerWallet" >
					<db:sql ><![CDATA[select customer_id,wallet from customers_wallet where customer_id = :customerId]]></db:sql>
					<db:input-parameters ><![CDATA[#[{
	customerId: vars.walletData.customer_id
}]]]></db:input-parameters>
				</db:select>
				<logger level="INFO" doc:name="amount-exist-in-wallet" doc:id="1b22ba63-418c-49d8-808e-194b1700b0e8" message="customer has sufficient amount in wallet"/>
				<choice doc:name="Choice" doc:id="ee0621bb-0003-43ba-b661-14e755daf522" >
					<when expression="#[sizeOf(vars.checkCustomerWallet)&gt;0]" >
						<logger level="INFO" doc:name="update-amount-in-customer-wallet" doc:id="f3a9c26b-5d35-4a04-835e-9bbaa74e5908" message="update amount in customer wallet" />
						<ee:transform doc:name="plus-two-amount" doc:id="8db3f729-a03b-4e16-ae70-6a8c903a7c25" >
							<ee:message >
								<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
	
}]]></ee:set-payload>
							</ee:message>
							<ee:variables >
								<ee:set-variable variableName="totalWalletAmount" ><![CDATA[%dw 2.0
output application/json

---
if(vars.walletData.wallet_type=="credit")
vars.walletData.amount + vars.checkCustomerWallet.wallet[0] as Number
else
vars.checkCustomerWallet.wallet[0] as Number - vars.walletData.amount 

]]></ee:set-variable>
							</ee:variables>
						</ee:transform>
						<logger level="INFO" doc:name="total-amount" doc:id="6c2b00a0-6bee-4010-8442-0bbc50395912" message="total amount #[vars.totalWalletAmount]" />
						<db:update doc:name="Update-amount-customer-wallet" doc:id="257f0a68-6d65-4b9c-9652-be9d86ac1d36" config-ref="Database_Config" >
							<db:sql ><![CDATA[update customers_wallet set wallet = :wallet where customer_id = :customerId]]></db:sql>
							<db:input-parameters ><![CDATA[#[{
	customerId: vars.walletData.customer_id,
	wallet: vars.totalWalletAmount
}]]]></db:input-parameters>
						</db:update>
						<db:insert doc:name="add-entry-wallet-transaction" doc:id="58e0a16b-0f60-4d20-b0cc-2f74115d327b" config-ref="Database_Config" >
							<db:sql ><![CDATA[insert into wallet_transaction(customer_id,types,amount) values(:customerId,:types,:amount)]]></db:sql>
							<db:parameter-types >
								<db:parameter-type key="types" type="OTHER" />
							</db:parameter-types>
							<db:input-parameters ><![CDATA[#[{
	customerId: vars.walletData.customer_id,
	types: vars.transactionType,
	amount: vars.walletData.amount
}]]]></db:input-parameters>
						</db:insert>
						<ee:transform doc:name="success-message" doc:id="474f2972-d44f-41a5-91e6-5ac15d2b4f84" >
							<ee:message >
								<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
if(vars.walletData.wallet_type=="credit")
"The amount has been successfully credit in your wallet."
else
"The amount has been successfully debit from your wallet."]]></ee:set-payload>
							</ee:message>
						</ee:transform>
					</when>
					<otherwise >
						<logger level="INFO" doc:name="first-time-insert-amount-wallet" doc:id="b96d91bb-5c7f-4ce6-af9c-d5d3d69aabbd" message="insert the wallet" />
						<db:insert doc:name="Insert amount in customer wallet" doc:id="24f4778c-6319-457b-8a61-228ab9543f17" config-ref="Database_Config" autoGenerateKeys="true" target="insertWalletData" >
							<db:sql ><![CDATA[insert into customers_wallet(customer_id,wallet) values(:customerId,:wallet)]]></db:sql>
							<db:input-parameters ><![CDATA[#[{
	customerId: vars.walletData.customer_id,
	wallet: vars.walletData.amount
}]]]></db:input-parameters>
						</db:insert>
						<logger level="INFO" doc:name="amount-inserted-in-wallet" doc:id="f45899cb-d2d5-4460-a078-c7156da06362" message="amount has been inserted in wallet table"/>
						<db:insert doc:name="add-entry-wallet-transaction" doc:id="7645ffaf-a316-4559-ba4d-d0c8aeeb99d1" config-ref="Database_Config" >
							<db:sql ><![CDATA[insert into wallet_transaction(customer_id,types,amount) values(:customerId,:types,:amount)]]></db:sql>
							<db:parameter-types >
								<db:parameter-type key="types" type="OTHER" />
							</db:parameter-types>
							<db:input-parameters ><![CDATA[#[{
	customerId: vars.walletData.customer_id,
	types: vars.transactionType,
	amount: vars.walletData.amount
}]]]></db:input-parameters>
						</db:insert>
						<logger level="INFO" doc:name="transaction inserted" doc:id="45ef6691-30d0-4df6-902f-02a8991f7522" message="transaction entry inserted in table"/>
						<ee:transform doc:name="success-message" doc:id="7bf0e06d-ab50-4886-835b-47a388cd6181" >
							<ee:message >
								<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	'success': 'The Customer wallet has been added successfully.'
}]]></ee:set-payload>
							</ee:message>
						</ee:transform>
					</otherwise>
				</choice>
			</when>
			<otherwise >
				<ee:transform doc:name="customer-does-not-exist" doc:id="49e0336e-2354-427d-bdf9-0928107a2271" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	'message': 'Customer does not exist.'
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="get-stock-symbol-by-customer" doc:id="b5409c7a-4074-4283-a6be-186e315f8a5c" >
		<logger level="INFO" doc:name="Logger" doc:id="f3266a04-1d8e-4db1-8591-42e1d2aab323" message="#[attributes.uriParams.'stock-symbol']"/>
		<db:select doc:name="checkCustomerExist" doc:id="bd8125e6-4203-4b42-aeeb-1448f5dac1a1" config-ref="Database_Config" target="checkCustomerExist">
			<db:sql ><![CDATA[select * from customers where id =:customerId]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
	customerId: attributes.uriParams.'customer_id'
}]]]></db:input-parameters>
		</db:select>
		<choice doc:name="Choice" doc:id="8d5b96ce-d801-4bca-b885-2a0406199e42" >
			<when expression="#[sizeOf(vars.checkCustomerExist)&gt;0]">
				<db:select doc:name="Get-stock" doc:id="72ab0517-6c13-47ea-9311-71bf3b9b8672" config-ref="Database_Config" target="customerStockData">
					<db:sql ><![CDATA[select * from customers_portfolio where stock_symbol = :symbol AND customer_id= :customerId]]></db:sql>
					<db:input-parameters ><![CDATA[#[{
	symbol: attributes.uriParams.'stock-symbol',
	customerId: attributes.uriParams.'customer_id'
}]]]></db:input-parameters>
				</db:select>
				<choice doc:name="Choice" doc:id="cd9191b8-441c-41d0-9da6-7367bd24da8f" >
					<when expression="#[sizeOf(vars.customerStockData)&gt;0]">
						<ee:transform doc:name="Transform Message" doc:id="04aad8ce-089f-4a35-a013-66e47af0a984" >
							<ee:message >
								<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
vars.customerStockData]]></ee:set-payload>
							</ee:message>
						</ee:transform>
					</when>
					<otherwise >
						<ee:transform doc:name="Transform Message" doc:id="de8085e8-b86e-4a8f-8c1a-53892797bdfe" >
							<ee:message >
								<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	'message' : 'No stock found.'
}]]></ee:set-payload>
							</ee:message>
						</ee:transform>
					</otherwise>
				</choice>
			</when>
			<otherwise >
				<ee:transform doc:name="Transform Message" doc:id="5db6e7bf-1bc2-45b5-be03-f910fdc87bcb" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	'message': 'Customer does not exist.'
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="get-customer-wallet-amount" doc:id="eaae686b-0bda-4250-96e8-a24dc7d5a621" >
		<logger level="INFO" doc:name="get-customer-wallet-amount-flow" doc:id="4e501fee-778c-492d-b195-d46ab1e0f7d2" message="get-customer-wallet-amount-flow"/>
		<set-variable value="#[message.attributes.uriParams.'customer_id']" doc:name="Set customer-id" doc:id="3cd88617-5bb1-442d-a82e-b7a7461a0d88" variableName="customerId"/>
		<logger level="INFO" doc:name="console-customer-id" doc:id="5e5799ca-f3b5-46d8-a460-49681e46f2fb" message="value of customer-id is:  #[vars.customerId]"/>
		<db:select doc:name="get-customer-amount-from-wallet" doc:id="adfe5d76-1436-4553-8f72-edea3f59db8c" config-ref="Database_Config" target="walletAmount" queryTimeout="50000">
			<db:sql ><![CDATA[select * from customers_wallet where customer_id = :customerId]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
	customerId: vars.customerId
}]]]></db:input-parameters>
		</db:select>
		<logger level="INFO" doc:name="console-customer-wallet" doc:id="08e0d9d6-1ec5-4b1f-ac7d-0d4ecaef39b6" message="output of customer wallet: #[vars.walletAmount]"/>
		<choice doc:name="Choice" doc:id="7508009e-c4ab-4a4d-9a21-41fb831d35cb" >
			<when expression="#[sizeOf(vars.walletAmount)&gt;0]">
				<logger level="INFO" doc:name="wallet-amount-exist" doc:id="27628364-ee9c-43ed-8565-6241db6d300c" message="wallet-amount-exist"/>
				<ee:transform doc:name="show-customer-wallet-amount" doc:id="96e4c5d6-dfcf-42b6-a7fe-c36dfcec74ec" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
vars.walletAmount]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<otherwise >
				<logger level="INFO" doc:name="no-amount-wallet" doc:id="b49b1008-64a6-4ba3-9892-ad1ab056167f" message="no-amount-wallet"/>
				<ee:transform doc:name="message" doc:id="3b1cffeb-99eb-442f-89e3-44c8edbabcb6" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	'message': 'No sufficient amount in your wallet'
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="add-stock-customer-portfolio" doc:id="080fe5ad-f413-47a1-9398-29dcf9b42fe2" >
		<logger level="INFO" doc:name="console-payload" doc:id="17f33eba-1e5a-4cd5-bfdc-135baaf3224c" message="payload of stock customer portfolio: #[payload]"/>
		<db:select doc:name="check-customer-exist-or-not" doc:id="4c24ecfd-fefb-4ceb-96d7-45caff8b932f" config-ref="Database_Config" target="checkCustomerExistOrNot">
			<db:sql ><![CDATA[select * from customers where id = :customerId]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
	customerId : attributes.uriParams.'customer_id'
}]]]></db:input-parameters>
		</db:select>
		<choice doc:name="Choice" doc:id="6c00abe2-96ed-4d6b-88c2-e311e1b2b928" >
			<when expression="#[sizeOf(vars.checkCustomerExistOrNot)&gt;0]">
				<logger level="INFO" doc:name="customer-exist" doc:id="fb091e2e-ce72-48f4-959a-f0cd4b74776c" message="customer-exist"/>
				<db:insert doc:name="Insert stock data" doc:id="51f3bc53-19d0-4c3e-9fb8-0ed7f775d43b" config-ref="Database_Config" autoGenerateKeys="true" target="insertStockData">
					<db:sql ><![CDATA[insert into customers_portfolio(customer_id,portfolio_name,stock_symbol,quantity,buy_price,sell_price,status,buy_date,sell_date)
values(:customer_id,:portfolio_name,:stock_symbol,:quantity,:buy_price,:sell_price,:status,:buy_date,:sell_date)]]></db:sql>
					<db:parameter-types >
						<db:parameter-type key="status" type="OTHER" />
					</db:parameter-types>
					<db:input-parameters ><![CDATA[#[{
	customer_id: payload.customer_id,
	portfolio_name: payload.portfolio_name,
	stock_symbol: payload.stock_symbol,
	quantity: payload.quantity,
	buy_price: payload.buy_price as Number,
	sell_price: payload.sell_price as Number,
	status: payload.status,
	buy_date: payload.buy_date as Date {format:"yyyy-mm-dd"},
	sell_date: payload.sell_date as Date {format:"yyyy-mm-dd"}
	
}]]]></db:input-parameters>
				</db:insert>
				<ee:transform doc:name="success-message" doc:id="a6268844-d884-45c7-b8b3-8f628e7f38ed" >
					<ee:message >
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="portfolioSuccessStatus" ><![CDATA[%dw 2.0
output application/json
---
{
	'success': true
}]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
			</when>
			<otherwise >
				<logger level="INFO" doc:name="customer-does-not-exist" doc:id="98c2feca-2b15-45fd-962b-0688e9b5b507" message="customer-does-not-exist"/>
				<ee:transform doc:name="message" doc:id="30a9649c-333f-4a60-b2b8-23f86e981d59" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	'message': 'Customer does not exist'
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="insert-stock-customer-portfolio" doc:id="51fc5954-ecf7-4fd0-8614-c6281fd64eb8" >
		<logger level="INFO" doc:name="insert-customer-stock-portfolio-flow" doc:id="4bbc6910-2d22-43b9-a539-aa0156582a63" message="insert-customer-stock-portfolio-flow"/>
		<db:select doc:name="Check-customer-exist Or not" doc:id="ccc36642-05fa-432a-aa82-0ab1f874410f" config-ref="Database_Config" target="checkCustomerExist">
			<db:sql ><![CDATA[select * from customers where id = :customerId]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
	customerId : message.attributes.uriParams.customer_id
}]]]></db:input-parameters>
		</db:select>
		<choice doc:name="Choice" doc:id="aee3d192-e604-45df-a9e3-e197e28567ce" >
			<when expression="#[sizeOf(vars.checkCustomerExist)&gt;0]">
				<logger level="INFO" doc:name="before-insert" doc:id="f8545646-7090-48c6-86e9-f4c6a2197f89" message="payload: #[payload]"/>
				<db:insert doc:name="Insert-stock-customer-portfolio" doc:id="59a89a5e-0d52-4322-a926-c28ea6c4eb57" config-ref="Database_Config" autoGenerateKeys="true">
					<db:sql ><![CDATA[insert into customers_portfolio(customer_id,portfolio_name,stock_symbol,quantity,
buy_price,sell_price,status,buy_date,sell_date) values(:customer_id,:portfolio_name,
:stock_symbol,:quantity,:buy_price,:sell_price,:status,:buy_date,:sell_date)]]></db:sql>
					<db:parameter-types >
						<db:parameter-type key="status" type="OTHER"/>
					</db:parameter-types>
					<db:input-parameters ><![CDATA[#[{
	customer_id: attributes.uriParams.customer_id,
	portfolio_name: payload.portfolio_name as String default null,
	stock_symbol: payload.stock_symbol as String default null,
	quantity: attributes.queryParams.quantity,
	buy_price: attributes.queryParams.buy_price,
	sell_price: attributes.queryParams.sell_price,
	status: attributes.queryParams.status,
	buy_date: attributes.queryParams.buy_date,
	sell_date: attributes.queryParams.sell_date
}]]]></db:input-parameters>
				</db:insert>
				<logger level="INFO" doc:name="stock inserted" doc:id="4e4cb974-168a-4661-901c-f2b3e38c64e2" message="stock inserted"/>
				<ee:transform doc:name="success-message" doc:id="ed75b4fd-50b7-4f6a-863a-508590bf35a5" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	'success': true
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<otherwise >
				<ee:transform doc:name="customer-does-not-exist" doc:id="431302b3-c458-4a86-8ee3-e83402520c0b" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	'success': false
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="get-stock-data-by-symbol" doc:id="f5d6c05f-5825-492a-a26d-0d4a6df10adc" >
		<logger level="INFO" doc:name="get-stock-data-by-symbol-flow" doc:id="5232c4d8-a661-4a7b-9cb2-5125a03d9cb0" message="get-stock-data-by-symbol-flow"/>
		<set-variable value="#[attributes.uriParams.symbol_name]" doc:name="set-symbol-name-in-variable" doc:id="ae666949-d4f6-42c9-b5d1-1e42360becfc" variableName="stockSymbol"/>
		<logger level="INFO" doc:name="console-stock-symbol-name" doc:id="ac213716-8274-4d0f-9c3b-773b0bcc0443" message="stock symbol:  #[vars.stockSymbol]"/>
		<db:select doc:name="get-stock-data-by-symbol" doc:id="708cf9cc-1f3b-40c2-a5e1-e2f5e4a78f83" config-ref="Database_Config" target="stockData">
			<db:sql ><![CDATA[select * from stock where stock_symbol = :stockSymbol]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
	stockSymbol: vars.stockSymbol
}]]]></db:input-parameters>
		</db:select>
		<logger level="INFO" doc:name="console-stock-data" doc:id="cc390406-8e8b-4731-a873-f514433fe3be" message="stock-data:  #[vars.stockData]"/>
		<choice doc:name="Choice" doc:id="195a5466-fc86-4bee-8b3a-55bfd37f7504" >
			<when expression="#[sizeOf(vars.stockData)&gt;0]">
				<ee:transform doc:name="stock-data" doc:id="01c8b12b-147c-425f-8eae-19f26bcc088a" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
vars.stockData]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<otherwise >
				<ee:transform doc:name="no-stock-data" doc:id="4557c611-38b3-4919-8629-f55c504e7df9" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	'message': 'No stock found'
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
	</sub-flow>
</mule>
